{

	'log_info': {
		'debug_file':'debug.log',
		'down_file': 'downloaded.log',
		'down_fail': 'download_fail.log',
		'log_mode' : 'append','replace',
		'log_path' : '.'
	}
	'down_info': {
		'start_url': 'xxx.com',
		'content_matches': [ r'xxx', r'match2', 'match3'],
		'last_save_mode' : 'file' | 'other',
		'last_save_log'  : 'last_save_log.log'
	}
	
}	


import datetime

class Log :
	def __init__ (self,config):
		debug_filename = self.make_filename("debug")
		down_filename = self.make_filename ("downloaded")
		fail_filename = self.make_filename ("download_fail")
		
		self.debug_file = self.make_file (config, debug_filename)
		self.down_file  = self.make_file (config, down_filename)
		self.fail_file  = self.make_file (config, fail_filename)
		
		
	def make_filename(self,opt):
		start_time = datetime.datetime.now().strftime("%Y-%m-%d__%H:%M:%S")
		if config.get(opt):
			filename =  config.get(opt) 
		else:
			filename = "%s_%s.log" % (opt,start_time)
		return filename
	
	def make_file (self,config,filename):
		if config.get("log_info"):
			if config.get("log_info").get("log_path"):
				log_dir_path = config.get("log_info").get("log_path")
			else:
				log_dir_path = '.'
			filepath = os.path.join(log_dir_path,  filename)
			
			if config.get("log_info").get("log_mode"):
				if config.get("log_info").get("log_mode")=='a':
					log_mode = 'a'
				elif config.get("log_info").get("log_mode")=='w':
					log_mode = 'w'
				else: 
					log_mode = 'w'
			try:
				r = open (filepath, log_mode)
				return r
			except:
				print 'open file %s error when create log file' % filepath
		else:
			pass
			
	def write_log (self, file_operate,content):
		if type(content) == list:
			file_operate.write('\n'.join(content))
		else:
			file_operate.write(content)
	
	def debug (self,content):
		self.write_log (self.debug_file)
	
	def down (self,content):
		self.write_log (self.down_file)
	
	def fail (self,content):
		self.write_log (self.fail_file)
		
		
		

def start_job (config):
	if not config.get("down_info"):
		write_log(config, 
		

